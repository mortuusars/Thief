plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "thief-common.mixins.json"
        mixinConfig "thief-forge.mixins.json"
    }

    runs {
        create("client2") {
            inherit(getByName("client"))

            name("Second Client")
            programArgs("--username", "AnotherDev")

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            client()
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        // Location of the maven for mixed mappings, Registrate, and Flywheel
        name 'tterrag maven'
        url 'https://maven.tterrag.com'
    }
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url = "https://api.modrinth.com/maven" } // Lithostitched
}

dependencies {
    forge "net.minecraftforge:forge:${forge_version}"
    // Horseman does not depend on Architectury API:
    // modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    implementation(include("io.github.llamalad7:mixinextras-forge:0.4.1"))

    modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    modRuntimeOnly("mezz.jei:jei-${minecraft_version}-forge:${jei_version}") { transitive = false }

    modCompileOnlyApi("dev.latvian.mods:kubejs-forge:${kubejs_version}")
    // Not working in dev env:
     modRuntimeOnly("dev.latvian.mods:kubejs-forge:${kubejs_version}")
     modRuntimeOnly("curse.maven:probejs-585406:${probejs_forge_id}")

    modCompileOnlyApi("curse.maven:jade-324717:${jade_forge_id}")
    modRuntimeOnly("curse.maven:jade-324717:${jade_forge_id}") { transitive = false }

//    modImplementation("maven.modrinth:lithostitched:${lithostitched_forge_version}")
//    modImplementation("maven.modrinth:ct-overhaul-village:${ctov_forge_version}")
//    modImplementation("maven.modrinth:improved-village-placement:${improved_village_placement_version}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    // input variables of this task:
    var replaceProperties = [
            minecraft_version    : minecraft_version,
            mod_id               : mod_id,
            mod_name             : mod_name,
            mod_version          : mod_version,
            mod_license          : mod_license,
            mod_authors          : mod_authors,
            mod_description      : mod_description,
            mod_page             : mod_page,
            mod_github           : mod_github,
    ]
    // setting them as input
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta', 'update.json']) {
        expand replaceProperties + [project: project]
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"

//    relocate("com.llamalad7.mixinextras", "io.github.mortuusars.horseman.mixinextras")
//    mergeServiceFiles()
}

remapJar {
    archiveClassifier = "forge"
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}